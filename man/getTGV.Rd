% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getCrossTGV.R
\name{getTGV}
\alias{getTGV}
\title{Estimates the total genetic value for a set of crosses}
\usage{
getTGV(
  MatePlan,
  Markers,
  addEff,
  domEff,
  K,
  ploidy = 2,
  Weights = NULL,
  Scale = TRUE
)
}
\arguments{
\item{MatePlan}{data frame with two columns indicating the crosses.}

\item{Markers}{matrix with markers information for all candidate parents,
coded as 0,1,2.}

\item{addEff}{column vector (for one trait) or a matrix (for more than one trait) with additive marker effects.}

\item{domEff}{column vector (for one trait) or a matrix (for more than one trait) with dominance markers effects.}

\item{K}{relationship matrix between all candidates to parents.}

\item{ploidy}{data ploidy (generally an even number). Default=2.}

\item{Weights}{vector with the weights for each trait. Only used when more than one trait is given.}

\item{Scale}{Boolean. If TRUE, the trait values will be scaled. The default is TRUE. It is only used when more than one trait is given.}
}
\value{
A data frame with all possible crosses from the MatePlan (Parent1 and Parent2), their total genetic value (Y), and covariance from the relationship matrix (K).
}
\description{
The total genetic value for a set of crosses is estimated following the formulae proposed by Falconer and Mackay (1996). It uses the markers and the markers effects
(additive and dominance effects). For more than one trait, the total genetic value is estimated by an index, a linear combination among the traits. Weights should be informed for each trait in this later case. The relationship matrix
(K) here presented as an argument for creating the output as the input for the optimization function (selectCrosses).
}
\examples{
\dontrun{
# 1. Loading the data
data(generic_MrkEffects) # Additive effects
data(generic_Geno) # Markers

# 2. Parents
Parents <- rownames(generic_Geno)

# 3. Creating the mating plan
CrossPlan <- planCross(TargetPop = Parents,
                       MateDesign = "half")

# 4. Creating relationship matrix
ScaledMarkers <- scale(generic_Geno, scale = FALSE)

relMat <- (ScaledMarkers \%*\% t(ScaledMarkers)) / ncol(ScaledMarkers)

# 4. Single trait
ST_tgv <- getTGV(MatePlan = CrossPlan,
                 Markers = generic_Geno,
                 addEff = generic_MrkEffects[, 1],
                 domEff = generic_MrkEffects[, 3],
                 K = relMat)

head(ST_tgv, 20)

# 5. Multi trait
MT_tgv <- getTGV(MatePlan = CrossPlan,
                 Markers = generic_Geno,
                 addEff = generic_MrkEffects[, 1:2],
                 domEff = generic_MrkEffects[, 3:4],
                 K = relMat,
                 Weights = c(0.8, 0.2))

head(MT_tgv, 20)
}

}
\references{
\emph{Falconer, DS & Mackay TFC (1996). Introduction to quantitative genetics. Pearson Education India.}
}
\author{
Marco Antonio Peixoto, \email{marco.peixotom@gmail.com}
}
