% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selectCrosses.R
\name{selectCrosses}
\alias{selectCrosses}
\title{Select a mating plan that maximizes the criteria given some parameters}
\usage{
selectCrosses(
  data,
  n.cross = 200,
  max.cross = 4,
  min.cross = 2,
  max.cross.to.search = 1e+05,
  culling.pairwise.k = NULL
)
}
\arguments{
\item{data}{data frame with possible crosses to filter out.}

\item{n.cross}{number of crosses in the mating plan.}

\item{max.cross}{maximum number of crosses per individual in the plan.}

\item{min.cross}{minimum number of crosses per individual in the plan (this is the target, some parents might be used just one time).}

\item{max.cross.to.search}{maximum number of rows in the input to search for the solution.}

\item{culling.pairwise.k}{don't allow crosses with more than this threshold of relatedness. Default is NULL, don't use it.}
}
\value{
A data frame with all possible crosses.
}
\description{
The is the core function for optimization. The input (argument data) is a data frame with four columns: Parent1, Parent2, Y, and K. The Parent1 and Parent2 represent the cross itself.
The column Y is a criterion to be maximized. It could be any estimates between the pair of parents, like mean parental average, total genetic value, and usefulness. The last column (K) is the covariance
between the pair of individuals that is presented in the cross (i.e., Parent1 and Parent2). This estimation is used to do a cut off in the mating plan, based on the value given in culling.pairwise.k. All
crosses with relatedness values higher than this threshold will be discarded. This is done in order to improve the value of the given criterion (Y) under a constrain in relatedness.
}
\examples{
\dontrun{
# 1. Loading the data
data(lines_Geno)
data(lines_addEffects)
data(lines_GenMap)

# 2. Crossing plan
CrossPlan <- planCross(TargetPop = rownames(lines_Geno))

# 3 Creating relationship matrix
ScaledMarkers <- scale(lines_Geno, scale = FALSE)

relMat <- (ScaledMarkers \%*\% t(ScaledMarkers)) / ncol(ScaledMarkers)

# 4. Based on usefulness

# 4.1 Calculating the usefulness of trait number 1
usef_add <- getUsefA(MatePlan = CrossPlan,
                     Markers = lines_Geno,
                     addEff = lines_addEffects[, 1],
                     Map.In = lines_GenMap,
		K = relMat,
                     propSel = 0.05,
                     K = relMat,
                     Type = "RIL")


# 4.2 Crosses selected
maxGainPlan <- selectCrosses(data = usef_add[[1]], # Usefulness
                             n.cross = 25,
                             max.cross = 3,
                             min.cross = 1,
                             culling.pairwise.k = 1)

# Crosses parameters
maxGainPlan[[1]]

# Mating Plan
maxGainPlan[[2]]

# Graph
maxGainPlan[[3]]

# 5. Based on mean parental average

# 5.1 Criterion
Crit <- data.frame(Id = lines_IndBLUP[, 1],
                   Criterion = lines_IndBLUP[, 2])

# 5.2 Single trait mean parental average
ST_mpa <- getMPA(MatePlan = CrossPlan,
                 Criterion = Crit,
                 K = relMat)

# 5.3 Crosses selected
maxGainPlan2 <- selectCrosses(data = ST_mpa,
                              n.cross = 25,
                              max.cross = 3,
                              min.cross = 1,
                              culling.pairwise.k = 1)


# Crosses parameters
maxGainPlan[[1]]

# Mating Plan
maxGainPlan[[2]]

# Graph
maxGainPlan[[3]]
}

}
\author{
Rodrigo R Amadeu, \email{rramadeu@gmail.com} Marco Antonio Peixoto, \email{marco.peixotom@gmail.com}
}
